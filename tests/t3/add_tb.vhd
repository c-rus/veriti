library ieee;
use ieee.std_logic_1164.all;
library std;
use std.textio.all;

library work;
use work.veriti.all;

entity add_tb is
    generic (
        LEN : positive := 16
    );
end entity;

architecture sim of add_tb is

    -- This record is auto-generated by Python. DO NOT EDIT.
    type add_bfm is record
        cin: std_logic;
        in0: std_logic_vector(LEN-1 downto 0);
        in1: std_logic_vector(LEN-1 downto 0);
        sum: std_logic_vector(LEN-1 downto 0);
        cout: std_logic;
    end record;
      
    signal bfm : add_bfm;

    signal clk  : std_logic := '0';
    signal halt : boolean := false;

    --! declare internal required testbench signals
    constant TIMEOUT_LIMIT : natural := 1_000;

    file events : text open write_mode is "events.log";

begin
    -- instantiate UUT
    uut : entity work.add
        generic map (
            LEN => LEN
        ) port map (
            cin  => bfm.cin,
            in0  => bfm.in0,
            in1  => bfm.in1,
            sum  => bfm.sum,
            cout => bfm.cout
        );

    --! generate a 50% duty cycle for 25 Mhz
    spin_clock(clk, 40 ns, halt);

    --! test reading a file filled with test vectors
    DRIVER : process
        file inputs : text open read_mode is "inputs.trace";

        -- This procedure is auto-generated by Python. DO NOT EDIT.
        procedure send_transaction(file fd: text) is
            variable row: line;
        begin
            if endfile(fd) = false then
                readline(fd, row);
                drive(row, bfm.cin);
                drive(row, bfm.in0);
                drive(row, bfm.in1);
            end if;
        end procedure;

    begin  
        -- drive transactions
        while endfile(inputs) = false loop
            send_transaction(inputs);
            wait until rising_edge(clk);
        end loop;

        -- wait for all outputs to be checked
        wait;
    end process;

    CHECKER : process
        file outputs : text open read_mode is "outputs.trace";

        procedure score_transaction(file fd: text) is 
            variable row: line;
            variable expct: add_bfm;
        begin
            if endfile(fd) = false then
                readline(fd, row);
                load(row, expct.sum);
                log_assertion(events, bfm.sum, expct.sum, "sum");
                load(row, expct.cout);
                log_assertion(events, bfm.cout, expct.cout, "cout");
            end if;
        end procedure;

    begin
        while endfile(outputs) = false loop
            -- wait for a valid time to check
            wait until rising_edge(clk);
            -- compare outputs
            score_transaction(outputs);
        end loop;
        -- halt the simulation
        complete(halt);
    end process;

end architecture;